# Task 2: Tic-Tac-Toe with AI (Minimax Algorithm)

import math

def print_board(board):
    for row in board:
        print(" | ".join(row))
    print()

def is_winner(board, player):
    # Check rows, columns, diagonals
    for row in board:
        if all(s == player for s in row):
            return True
    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)) or all(board[i][2-i] == player for i in range(3)):
        return True
    return False

def is_full(board):
    return all(cell != "-" for row in board for cell in row)

def minimax(board, depth, is_maximizing):
    if is_winner(board, "O"):
        return 1
    if is_winner(board, "X"):
        return -1
    if is_full(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == "-":
                    board[i][j] = "O"
                    score = minimax(board, depth + 1, False)
                    board[i][j] = "-"
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == "-":
                    board[i][j] = "X"
                    score = minimax(board, depth + 1, True)
                    board[i][j] = "-"
                    best_score = min(score, best_score)
        return best_score

def best_move(board):
    best_score = -math.inf
    move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == "-":
                board[i][j] = "O"
                score = minimax(board, 0, False)
                board[i][j] = "-"
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move

def play_game():
    board = [["-"] * 3 for _ in range(3)]
    print("You are X, AI is O")
    print_board(board)

    while True:
        # Human Move
        row, col = map(int, input("Enter your move (row col): ").split())
        if board[row-1][col-1] != "-":
            print("Invalid move! Try again.")
            continue
        board[row-1][col-1] = "X"
        print_board(board)

        if is_winner(board, "X"):
            print("You win! ðŸŽ‰")
            break
        if is_full(board):
            print("It's a draw!")
            break

        # AI Move
        move = best_move(board)
        board[move[0]][move[1]] = "O"
        print("AI Move:")
        print_board(board)

        if is_winner(board, "O"):
            print("AI wins! ðŸ¤–")
            break
        if is_full(board):
            print("It's a draw!")
            break

if __name__ == "__main__":
    play_game()
